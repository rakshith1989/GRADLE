<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Response_Mapping.map" md5sum="be72769d53decea7a7903a7ea50acc8b" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Response_Mapping.map
*   Map declaration(s):	Response_Mapping
*   Input file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%257DVoiceOrderTransientContext/message%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%252FRetrieveVoiceOrderService%257DretrieveVoiceOrderResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%257DVoiceOrderTransientContext/message%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%252FRetrieveVoiceOrderService%257DretrieveVoiceOrderResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io2="wsdl.http://CILSBVoiceServicesLib/RetrieveVoiceOrderService"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:io9="http://CILSBVoiceServicesLib/RetrieveVoiceOrderService"
    xmlns:io6="http://CILSBVoiceServicesLib"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:map="http://CILSBVoiceServicesMod/xslt/Response_Mapping"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set date exsl map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Response_Mapping2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:Response_Mapping"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:Response_Mapping">
    <io3:smo>
      <context>
        <transient>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io6:VoiceOrderTransientContext'"/>
          </xsl:attribute>
          <!-- a simple mapping with no associated source:  to "errorRuleType"(string) -->
          <xsl:element name="errorRuleType">
            <xsl:text>RESPONSE_PAYLOAD</xsl:text>
          </xsl:element>
          <!-- a simple data mapping: "context/transient/responseDetailString"(string) to "responseDetailString"(string) -->
          <xsl:if test="context/transient/responseDetailString">
            <xsl:element name="responseDetailString">
              <xsl:value-of select="context/transient/responseDetailString"/>
            </xsl:element>
          </xsl:if>
          <!-- a structural mapping: "context/transient/orderDetailsResponse"(orderDetailsResponseType) to "orderDetailsResponse"(orderDetailsResponseType) -->
          <xsl:if test="context/transient/orderDetailsResponse">
            <xsl:copy-of select="context/transient/orderDetailsResponse"/>
          </xsl:if>
        </transient>
      </context>
      <!-- a structural mapping: "body"(retrieveVoiceOrderResponseMsg) to "body"(retrieveVoiceOrderResponseMsg) -->
      <xsl:if test="body">
        <xsl:copy-of select="body"/>
      </xsl:if>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:Response_Mapping2">
    <xsl:param name="smo"/>
    <context>
      <transient>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io6:VoiceOrderTransientContext'"/>
        </xsl:attribute>
        <!-- a simple mapping with no associated source:  to "errorRuleType"(string) -->
        <xsl:element name="errorRuleType">
          <xsl:text>RESPONSE_PAYLOAD</xsl:text>
        </xsl:element>
        <!-- a simple data mapping: "$smo/context/transient/responseDetailString"(string) to "responseDetailString"(string) -->
        <xsl:if test="$smo/context/transient/responseDetailString">
          <xsl:element name="responseDetailString">
            <xsl:value-of select="$smo/context/transient/responseDetailString"/>
          </xsl:element>
        </xsl:if>
        <!-- a structural mapping: "$smo/context/transient/orderDetailsResponse"(orderDetailsResponseType) to "orderDetailsResponse"(orderDetailsResponseType) -->
        <xsl:if test="$smo/context/transient/orderDetailsResponse">
          <xsl:copy-of select="$smo/context/transient/orderDetailsResponse"/>
        </xsl:if>
      </transient>
    </context>
    <!-- a structural mapping: "$smo/body"(retrieveVoiceOrderResponseMsg) to "body"(retrieveVoiceOrderResponseMsg) -->
    <xsl:if test="$smo/body">
      <xsl:copy-of select="$smo/body"/>
    </xsl:if>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
