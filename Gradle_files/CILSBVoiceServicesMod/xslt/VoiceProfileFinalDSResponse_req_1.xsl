<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/VoiceProfileFinalDSResponse_req_1.map" md5sum="117e772b08d50a88322c7387cd7151d1" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		VoiceProfileFinalDSResponse_req_1.map
*   Map declaration(s):	VoiceProfileFinalDSResponse_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%257DVoiceProfileTransientContext/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Bhttp%253A%252F%252FCILSBVoiceServicesLib%257DVoiceProfileTransientContext/message%3D%257Bhttp%253A%252F%252FCILCommonLib%257DinvokeDownStreamResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://CILSBVoiceServicesLib"
    xmlns:io4="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out3="wsdl.http://CILCommonLib"
    xmlns:out2="http://CILCommonLib"
    xmlns:out="http://CILCommonLib/HeaderAdditionalInfoBO"
    xmlns:map="http://CILSBVoiceServicesMod/xslt/VoiceProfileFinalDSResponse_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set date exsl map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io2:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:VoiceProfileFinalDSResponse_req_12">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io2:smo" mode="map:VoiceProfileFinalDSResponse_req_1"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:VoiceProfileFinalDSResponse_req_1">
    <io2:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out3:invokeDownStreamResponseMsg'"/>
        </xsl:attribute>
        <out2:invokeDownStreamResponse>
          <!-- a structural mapping: "context/transient"(VoiceProfileTransientContext) to "downStreamMediationOutput"(CILCommonDSMediationOutputBO) -->
          <xsl:apply-templates select="context/transient" mode="localTransientToDownStreamMediationOutput_1020302860"/>
        </out2:invokeDownStreamResponse>
      </body>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:VoiceProfileFinalDSResponse_req_12">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out3:invokeDownStreamResponseMsg'"/>
      </xsl:attribute>
      <out2:invokeDownStreamResponse>
        <!-- a structural mapping: "$smo/context/transient"(VoiceProfileTransientContext) to "downStreamMediationOutput"(CILCommonDSMediationOutputBO) -->
        <xsl:apply-templates select="$smo/context/transient" mode="localTransientToDownStreamMediationOutput_1020302860"/>
      </out2:invokeDownStreamResponse>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "transient" to "downStreamMediationOutput".  -->
  <xsl:template match="transient"  mode="localTransientToDownStreamMediationOutput_1020302860">
    <downStreamMediationOutput>
      <!-- a structural mapping: "custProfileQueryResponse"(custProfileQueryResponseType) to "responseDetail"(anyType) -->
      <!-- variables for custom code -->
      <xsl:variable name="custProfileQueryResponse" select="custProfileQueryResponse"/>
      <xsl:if test="boolean($custProfileQueryResponse)">
        <responseDetail>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'custProfileQueryResponseType'"/>
          </xsl:attribute>
          <xsl:call-template name="copyNamespaceDeclarations">
            <xsl:with-param name="root" select="custProfileQueryResponse"/>
          </xsl:call-template>
          <xsl:copy-of select="custProfileQueryResponse/@*|custProfileQueryResponse/node()"/>
        </responseDetail>
      </xsl:if>
      <!-- a simple data mapping: "responseDetailString"(string) to "responseDetailString"(string) -->
      <!-- variables for custom code -->
      <xsl:variable name="responseDetailString" select="responseDetailString"/>
      <xsl:if test="boolean($responseDetailString)">
        <responseDetailString>
          <xsl:value-of select="responseDetailString"/>
        </responseDetailString>
      </xsl:if>
      <!-- a simple data mapping: "errorRuleType"(string) to "errorRuleType"(string) -->
      <!-- variables for custom code -->
      <xsl:variable name="errorRuleType" select="errorRuleType"/>
      <xsl:if test="boolean($errorRuleType)">
        <errorRuleType>
          <xsl:value-of select="errorRuleType"/>
        </errorRuleType>
      </xsl:if>
      <!-- a simple data mapping: "custProfileQueryResponse/responseHeader/requestId"(string) to "relatedSystemID"(string) -->
      <!-- variables for custom code -->
      <xsl:variable name="requestId" select="custProfileQueryResponse/responseHeader/requestId"/>
      <xsl:if test="boolean($requestId)">
        <relatedSystemID>
          <xsl:value-of select="custProfileQueryResponse/responseHeader/requestId"/>
        </relatedSystemID>
      </xsl:if>
      <responseMessageList>
        <!-- a for-each transform: "messageItem"(messageItemType) to "messageDetail"(messageDetailType) -->
        <xsl:apply-templates select="custProfileQueryResponse/responseMessageList/messageItem" mode="localMessageItemToMessageDetail_1490877746"/>
      </responseMessageList>
    </downStreamMediationOutput>
  </xsl:template>

  <!-- This rule represents a for-each transform: "messageItem" to "messageDetail".  -->
  <xsl:template match="messageItem"  mode="localMessageItemToMessageDetail_1490877746">
    <messageDetail>
      <!-- a simple mapping with no associated source:  to "systemOriginated"(string) -->
      <systemOriginated>
        <xsl:text>eBCCS</xsl:text>
      </systemOriginated>
      <!-- a structural mapping: "messageCode"(string) to "code"(anyType) -->
      <code>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'xs4xs:string'"/>
        </xsl:attribute>
        <xsl:call-template name="copyNamespaceDeclarations">
          <xsl:with-param name="root" select="messageCode"/>
        </xsl:call-template>
        <xsl:copy-of select="messageCode/@*|messageCode/node()"/>
      </code>
      <!-- a structural mapping: "messageTextEnglish"(string) to "messageEnglish"(anyType) -->
      <xsl:if test="messageTextEnglish">
        <messageEnglish>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'xs4xs:string'"/>
          </xsl:attribute>
          <xsl:call-template name="copyNamespaceDeclarations">
            <xsl:with-param name="root" select="messageTextEnglish"/>
          </xsl:call-template>
          <xsl:copy-of select="messageTextEnglish/@*|messageTextEnglish/node()"/>
        </messageEnglish>
      </xsl:if>
      <!-- a structural mapping: "messageTextFrench"(string) to "messageFrench"(anyType) -->
      <xsl:if test="messageTextFrench">
        <messageFrench>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'xs4xs:string'"/>
          </xsl:attribute>
          <xsl:call-template name="copyNamespaceDeclarations">
            <xsl:with-param name="root" select="messageTextFrench"/>
          </xsl:call-template>
          <xsl:copy-of select="messageTextFrench/@*|messageTextFrench/node()"/>
        </messageFrench>
      </xsl:if>
    </messageDetail>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
